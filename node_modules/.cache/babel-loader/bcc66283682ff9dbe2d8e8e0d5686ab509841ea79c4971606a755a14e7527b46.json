{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = \"https://online-chess-platform-7f442b10751d.herokuapp.com/api\" || process.env.REACT_APP_API_BASE_URL;\nconst API = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// 获取当前登录用户的个人资料\nexport const fetchMyProfile = async token => {\n  API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  return await API.get('/api/profile/me');\n};\n\n// 获取特定用户的个人资料\nexport const fetchUserProfile = async (userId, token) => {\n  console.log('current token:', token); // 调试信息\n  API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  return await API.get(`/api/profile/${userId}`);\n};\n\n// 更新当前登录用户的个人资料\nexport const updateMyProfile = async (updatedData, token) => {\n  API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  return await API.put('/api/profile/me', updatedData);\n};\n\n// 更新个人简介（这个函数可能不再需要，因为可以使用 updateMyProfile 函数）\nexport const updateProfileBio = async (newBio, token) => {\n  API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  return await API.put('/api/profile/me', {\n    bio: newBio\n  });\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","API","create","baseURL","fetchMyProfile","token","defaults","headers","common","get","fetchUserProfile","userId","console","log","updateMyProfile","updatedData","put","updateProfileBio","newBio","bio"],"sources":["/Users/gucenzhang/web-chess/online-chess-react-platform/src/api/profile.js"],"sourcesContent":["import axios from 'axios';\nconst API_BASE_URL = \"https://online-chess-platform-7f442b10751d.herokuapp.com/api\" || process.env.REACT_APP_API_BASE_URL\nconst API = axios.create({ baseURL: API_BASE_URL });\n\n// 获取当前登录用户的个人资料\nexport const fetchMyProfile = async (token) => {\n    API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    return await API.get('/api/profile/me');\n};\n\n// 获取特定用户的个人资料\nexport const fetchUserProfile = async (userId, token) => {\n  console.log('current token:', token); // 调试信息\n  API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  return await API.get(`/api/profile/${userId}`);\n};\n\n// 更新当前登录用户的个人资料\nexport const updateMyProfile = async (updatedData, token) => {\n  API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  return await API.put('/api/profile/me', updatedData);\n};\n\n// 更新个人简介（这个函数可能不再需要，因为可以使用 updateMyProfile 函数）\nexport const updateProfileBio = async (newBio, token) => {\n    API.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    return await API.put('/api/profile/me', { bio: newBio });\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,YAAY,GAAG,8DAA8D,IAAIC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AACzH,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EAAEC,OAAO,EAAEN;AAAa,CAAC,CAAC;;AAEnD;AACA,OAAO,MAAMO,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC3CJ,GAAG,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EAChE,OAAO,MAAMJ,GAAG,CAACQ,GAAG,CAAC,iBAAiB,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEN,KAAK,KAAK;EACvDO,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAER,KAAK,CAAC,CAAC,CAAC;EACtCJ,GAAG,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EAChE,OAAO,MAAMJ,GAAG,CAACQ,GAAG,CAAE,gBAAeE,MAAO,EAAC,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAOC,WAAW,EAAEV,KAAK,KAAK;EAC3DJ,GAAG,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EAChE,OAAO,MAAMJ,GAAG,CAACe,GAAG,CAAC,iBAAiB,EAAED,WAAW,CAAC;AACtD,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEb,KAAK,KAAK;EACrDJ,GAAG,CAACK,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EAChE,OAAO,MAAMJ,GAAG,CAACe,GAAG,CAAC,iBAAiB,EAAE;IAAEG,GAAG,EAAED;EAAO,CAAC,CAAC;AAC5D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}